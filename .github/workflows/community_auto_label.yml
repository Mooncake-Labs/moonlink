name: Label community PRs

on:
  pull_request:
    # If you don't want to re-run on every push to the PR branch, remove "synchronize".
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  issues: write         # needed to add labels
  pull-requests: write  # not strictly required just for labels, but fine to keep

jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const org = 'mooncakelabs';
            const pr = context.payload.pull_request;
            const prAuthor = pr.user.login;

            // Quick dedupe: skip if "community" is already present
            const existing = new Set((pr.labels || []).map(l => l.name));
            if (existing.has('community')) {
              core.info('Label "community" already present; skipping.');
              return;
            }

            try {
              // 204 if member, 404 if not a member
              await github.rest.orgs.checkMembershipForUser({
                org,
                username: prAuthor,
              });

              core.info(`${prAuthor} is a member of ${org}; not adding label.`);
            } catch (error) {
              if (error.status === 404) {
                core.info(`${prAuthor} is NOT a member of ${org}; adding label "community".`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['community'],
                });
              } else {
                // Surface real failures (e.g., 403 if token can't read org membership)
                core.setFailed(`Membership check failed: ${error.status} ${error.message}`);
              }
            }
