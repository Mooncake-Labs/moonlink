name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: Format & Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          components: rustfmt,clippy
      - uses: taiki-e/install-action@v2
        with: { tool: cargo-deny }
      - uses: swatinem/rust-cache@v2
        with:
          shared-key: ${{ steps.toolchain.outputs.cachekey }}
      - run: cargo fmt --check
      - run: cargo clippy --all-targets --all-features -- -D warnings
      - run: cargo deny check

  # ───────────── Matrix for GCS and S3 Feature Tests ─────────────
  feature_tests:
    name: Feature Test (${{ matrix.storage }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - storage: gcs
            port: 4443
            hostname: gcs.local
            container: fake-gcs
            image: fsouza/fake-gcs-server:latest
            healthcheck: curl -sf http://gcs.local:4443/storage/v1/b
            features: storage-gcs
            args: -scheme http -port 4443
          - storage: s3
            port: 9000
            hostname: s3.local
            container: minio
            image: minio/minio:latest
            healthcheck: curl -sf http://minio:9000/minio/health/ready
            features: storage-s3
            args: server /data
    steps:
      - uses: actions/checkout@v4

      - name: Start Fake ${{ matrix.storage | upper }} Server
        run: |
          docker run -d \
            --name ${{ matrix.container }} \
            -p ${{ matrix.port }}:${{ matrix.port }} \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            -e STORAGE_DIR=/data \
            ${{ matrix.image }} ${{ matrix.args }}

      - name: Add hostname
        run: |
          echo "127.0.0.1 ${{ matrix.hostname }}" | sudo tee -a /etc/hosts

      - name: Wait for server
        timeout-minutes: 5
        run: |
          for i in {1..10}; do
            if ${{ matrix.healthcheck }}; then
              echo "Server ready!"
              break
            fi
            echo "Waiting for server..."
            sleep 2
          done

      - name: Run tests with --features=${{ matrix.features }}
        run: cargo test -p moonlink --features=${{ matrix.features }}

  # ───────────── Matrix for Chaos Tests ─────────────
  chaos_tests:
    name: Chaos Test (${{ matrix.storage || 'local' }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: local
            test: table_handler::chaos_test
            features: chaos-test
          - name: s3
            port: 9000
            hostname: s3.local
            container: minio
            image: minio/minio:latest
            args: server /data
            test: table_handler::chaos_s3_test
            features: chaos-test,storage-s3
            healthcheck: curl -sf http://minio:9000/minio/health/ready
          - name: gcs
            port: 4443
            hostname: gcs.local
            container: fake-gcs
            image: fsouza/fake-gcs-server:latest
            args: -scheme http -port 4443
            test: table_handler::chaos_gcs_test
            features: chaos-test,storage-gcs
            healthcheck: curl -sf http://gcs.local:4443/storage/v1/b

    steps:
      - uses: actions/checkout@v4

      - name: Start storage server
        if: ${{ matrix.storage != null }}
        run: |
          docker run -d \
            --name ${{ matrix.container }} \
            -p ${{ matrix.port }}:${{ matrix.port }} \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            -e STORAGE_DIR=/data \
            ${{ matrix.image }} ${{ matrix.args }}

      - name: Add hostname
        if: ${{ matrix.storage != null }}
        run: |
          echo "127.0.0.1 ${{ matrix.hostname }}" | sudo tee -a /etc/hosts

      - name: Wait for server
        if: ${{ matrix.storage != null }}
        timeout-minutes: 5
        run: |
          for i in {1..10}; do
            if ${{ matrix.healthcheck }}; then
              echo "Server ready!"
              break
            fi
            echo "Waiting for server..."
            sleep 2
          done

      - name: Run chaos test
        timeout-minutes: 10
        run: cargo test ${{ matrix.test }} --features=${{ matrix.features }} -p moonlink -- --nocapture

  # ───────────── Coverage Job ─────────────
  coverage:
    name: Coverage (llvm-cov + nextest)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          components: llvm-tools-preview
      - uses: swatinem/rust-cache@v2
        with:
          shared-key: ${{ steps.toolchain.outputs.cachekey }}
      - uses: taiki-e/install-action@v2
        with: { tool: cargo-llvm-cov }
      - uses: taiki-e/install-action@v2
        with: { tool: nextest }

      - run: |
          cargo llvm-cov \
            --locked \
            --lib \
            --lcov --output-path lcov.info \
            nextest --profile ci --no-fail-fast

      - name: Upload test results (JUnit)
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: target/nextest/ci/junit.xml
          fail_ci_if_error: true

      - name: Upload coverage (lcov)
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: lcov.info
          fail_ci_if_error: true
