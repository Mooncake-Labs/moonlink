name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Cancel superseded runs for the same branch / PR
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

defaults:
  run:
    shell: bash

# ---------------------------------------------------------------------------
# Jobs
# ---------------------------------------------------------------------------
jobs:
  # ────────────────────────────── 1 · FORMAT + CLIPPY ─────────────────────────
  lint:
    name: Format & Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          components: rustfmt,clippy

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - uses: swatinem/rust-cache@v2
        with:
          shared-key: ${{ steps.toolchain.outputs.cachekey }}

      - name: rustfmt check
        run: cargo fmt --check

      - name: clippy lint
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: cargo deny check
        run: cargo deny check

  # ──────────────────────── 2 · GCS feature test ────────────────────────────
  gcs_test:
    name: Unit tests with GCS feature enabled
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ─────────────────────── Start Fake GCS Server ──────────────────────────
      - name: Start Fake GCS Server
        run: |
          docker run -d \
            --name fake-gcs \
            -p 4443:4443 \
            -e STORAGE_DIR=/data \
            fsouza/fake-gcs-server:latest \
            -scheme http -port 4443
      
      # ─────────────── Add hostnames to /etc/hosts ──────────────────────────
      - name: Add gcs.local to /etc/hosts
        run: |
          echo "127.0.0.1 gcs.local" | sudo tee -a /etc/hosts

      # ───────────────────── Wait for Fake GCS to be ready ───────────────────
      - name: Wait for Fake GCS ready
        timeout-minutes: 5
        run: |
          for i in {1..10}; do
            if curl -sf http://gcs.local:4443/storage/v1/b; then
              echo "Fake GCS is ready!"
              break
            fi
            echo "Waiting for Fake GCS..."
            sleep 2
          done

      # ────────────────────── Toolchain + Test Tools ─────────────────────────
      - name: Run GCS feature tests
        timeout-minutes: 5
        run: |
          cargo test --lib --features=storage-gcs

  # ──────────────────────── 3 · S3 feature test ────────────────────────────
  s3_test:
    name: Unit tests with S3 feature enabled
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ─────────────────────── Start Fake S3 Server ──────────────────────────
      - name: Start Fake S3 Server
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio:latest server /data
      # ─────────────── Add hostnames to /etc/hosts ──────────────────────────
      - name: Add s3.local to /etc/hosts
        run: |
          echo "127.0.0.1 s3.local" | sudo tee -a /etc/hosts

      # ───────────────────── Wait for Fake S3 to be ready ───────────────────
      - name: Wait for Fake S3
        timeout-minutes: 5
        run: |
          for i in {1..10}; do
            if curl -sf http://minio:9000/minio/health/ready; then
              echo "Fake S3 is ready!"
              break
            fi
            echo "Waiting for Fake GCS..."
            sleep 2
          done

      # ────────────────────── Toolchain + Test Tools ─────────────────────────
      - name: Run S3 feature tests
        timeout-minutes: 5
        run: |
          cargo test --lib --features=storage-s3

  # ───────────────────────── 4 · TEST & COVERAGE ────────────────────────────
  coverage:
    name: Unit Tests + Coverage (llvm-cov + nextest)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ────────────────────── Toolchain + Test Tools ─────────────────────────
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          components: llvm-tools-preview

      - uses: swatinem/rust-cache@v2
        with:
          shared-key: ${{ steps.toolchain.outputs.cachekey }}

      - uses: taiki-e/install-action@v2
        with: { tool: cargo-llvm-cov }
      - uses: taiki-e/install-action@v2
        with: { tool: nextest }

      - name: Run tests via llvm-cov/nextest
        timeout-minutes: 5
        run: |
          cargo llvm-cov \
            --locked \
            --lib \
            --lcov --output-path lcov.info \
            nextest \
              --profile ci \
              --no-fail-fast

      # ---------- Upload JUnit test results to Codecov ----------
      - name: Upload test results (JUnit)
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: target/nextest/ci/junit.xml
          fail_ci_if_error: true

      # ---------- Upload coverage report to Codecov ----------
      - name: Upload coverage (lcov)
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: lcov.info
          fail_ci_if_error: true

  # ──────────────────────── 4 · Chaos test ────────────────────────────
  chaos_test:
    name: Chaos test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Start chaos test
        timeout-minutes: 10
        run: |
          RUST_BACKTRACE=1 cargo test table_handler::chaos_test --features=chaos-test -p moonlink -- --nocapture

  # ──────────────────────── 5 · S3 Chaos test ────────────────────────────
  s3_chaos_test:
    name: S3 chaos test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ─────────────────────── Start Fake S3 Server ──────────────────────────
      - name: Start Fake S3 Server
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio:latest server /data
      
      # ─────────────── Add hostnames to /etc/hosts ──────────────────────────
      - name: Add s3.local to /etc/hosts
        run: |
          echo "127.0.0.1 s3.local" | sudo tee -a /etc/hosts

      # ───────────────────── Wait for Fake S3 to be ready ───────────────────
      - name: Wait for Fake S3
        timeout-minutes: 5
        run: |
          for i in {1..10}; do
            if curl -sf http://minio:9000/minio/health/ready; then
              echo "Fake S3 is ready!"
              break
            fi
            echo "Waiting for Fake GCS..."
            sleep 2
          done

      - name: Start chaos test
        timeout-minutes: 10
        run: |
          cargo test storage::filesystem::accessor -p moonlink --features=chaos-test
          RUST_BACKTRACE=1 cargo test table_handler::chaos_s3_test --features=chaos-test,storage-s3 -p moonlink -- --nocapture

  # ──────────────────────── 6 · GCS Chaos test ────────────────────────────
  gcs_chaos_test:
    name: GCS chaos test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ─────────────────────── Start Fake GCS Server ──────────────────────────
      - name: Start Fake GCS Server
        run: |
          docker run -d \
            --name fake-gcs \
            -p 4443:4443 \
            -e STORAGE_DIR=/data \
            fsouza/fake-gcs-server:latest \
            -scheme http -port 4443
      
      # ─────────────── Add hostnames to /etc/hosts ──────────────────────────
      - name: Add gcs.local to /etc/hosts
        run: |
          echo "127.0.0.1 gcs.local" | sudo tee -a /etc/hosts

      # ───────────────────── Wait for Fake GCS to be ready ───────────────────
      - name: Wait for Fake GCS ready
        timeout-minutes: 5
        run: |
          for i in {1..10}; do
            if curl -sf http://gcs.local:4443/storage/v1/b; then
              echo "Fake GCS is ready!"
              break
            fi
            echo "Waiting for Fake GCS..."
            sleep 2
          done

      - name: Start chaos test
        timeout-minutes: 10
        run: |
          RUST_BACKTRACE=1 cargo test table_handler::chaos_gcs_test --features=chaos-test,storage-gcs -p moonlink -- --nocapture
